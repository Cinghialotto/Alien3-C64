; SOUND EFFECTS
		;LISTOPT	256
		;LIST	OFF

	INCLUDE	..\CODE\MACROS.PDS

VARS	=	1

SCREEN1	EQU	&F400		; game SCREEN1
CHARSET	EQU	&F800		; game char set

	INCLUDE	..\CODE\C64.PDS

MUSIC_RUN		EQU	1	; 0 no music call


FIRSTRASTER	EQU	246-64
SECONDRASTER	EQU	255
PANY		EQU	17	; pannel y char position

	ZP	R6510,1
	ZP	IRQSAVEA,1		; All reg saves for IRQ handlers
	ZP	IRQSAVEX,1
	ZP	IRQSAVEY,1
	; scroll and ass bits
	ZP	SCREENENABLE,1	; of total display is turned on
	ZP	SCREENTEST,1	; when equal to screenenable ok
	; reading of input devices
	ZP	MOVE,1		; joystick byte to do what ok
	ZP	JOY,1		; joystick temp byte never use	
	ZP	SYNC,1		; 1/50 second counter
	ZP	LEFT,1		; 0/1 the value of
	ZP	RIGHT,1		; 0/1 0 or 1 for any
	ZP	UP,1		; 0/1 movement for
	ZP	DOWN,1		; 0/1 that direction
	ZP	FIRE,1		; 0/1 in the joystick
	ZP	SELECT,1		; 0/1 in weapons select
	ZP	PAUSE,1		; hold game
	ZP	KEYBYTE0,1		; last row scan for F keys
	ZP	LEVEL,1
	ZP	MIKE1,2


	ORG	SCREEN1
	DS	1000,0
	
	ORG	CHARSET
	DS	8,0
	
	ORG	CHARSET+(48*8)
	INCBIN	..\CHARS\TEST.CHR
	ORG	&0200

	;INCBIN	..\MUSIC\BANK0.DAT
	INCBIN	..\MUSIC\BANK1.DAT
	;INCBIN	..\MUSIC\BANK7.DAT

	ORG	&1000

	; TITLE PAGE AND HIGH SCORE IRQ
TIRQ	STA	IRQSAVEA
	LDA	#1
	STA	VICIFR
	LDA	SCREENENABLE	; SCREEN ON OR OFF
	STA	SCREENTEST
	ORA	#%00001011		; 25 ROWS 3 Y SCROLL
	STA	VICCR1
	LDA	#%00011000		; MULTICOLOUR 38 COLS 3 IN X SCROLL
	STA	VICCR2
	LDA	#%11011110		; char & screen memory
	STA	VICMCR
	LDA	#%10010100		; BANK 3 &C000 TO &FFFF
	STA	BANK
	LDA	#0
	STA	ENABLE		; no sprites on screen
	LDA	#LT_BLUE
	STA	COLOUR1
	LDA	#BLUE
	STA	COLOUR2
	JSR	JOYGET
	STX	IRQSAVEX
	STY	IRQSAVEY
	JSR	PLAYER		; music player
	JSR	PDSMONITOR
	LDX	IRQSAVEX
	LDY	IRQSAVEY
	DEC	SYNC
	LDA	#200
	STA	RASTER
	LDA	IRQSAVEA
IGNORE	RTI

	; Scan Joystick and Keyboard
JOYGET	LDA	#255
	STA	CIA1+2
	LDA	#&FD
	STA	CIA1+0
	LDA	CIA1+1
	CMP	#&7F
	BNE	SHIFTLOCK
	LDA	#1
	NOW
SHIFTLOCK	LDA	#0
	STA	PAUSE
	LDA	#&7F
	STA	CIA1+0
	LDA	CIA1+1
	CMP	#&EF
	BNE	SPACEBAR
	LDA	#1
	NOW
SPACEBAR	LDA	#0
	STA	SELECT

	LDA	#&FE
	STA	CIA1+0
	LDA	CIA1+1
	STA	KEYBYTE0		; test for F keys
	;ENDIF

	LDA	#0
	STA	CIA1+2		; read joystick
	STA	LEFT
	STA	RIGHT
	STA	UP
	STA	DOWN
	STA	FIRE
	LDA	CIA1
	EOR	#%00011111
	STA	JOY
	AND	#%00001111		; use only direction bits
	STA	MOVE

	; 7 6 5 4 3 2 1 0
	; 0 up
	; 1 down
	; 2 left
	; 3 right
	; 4 fire
	LDA	JOY
	LSR	A
	ROL	UP
	LSR	A
	ROL	DOWN
	LSR	A
	ROL	LEFT
	LSR	A
	ROL	RIGHT
	LSR	A
	ROL	FIRE
	RTS


	; title high score IRQ and no NMI
SETTIRQ	SEI	
	LDA	#127
	STA	CIA1ICR
	STA	CIA2ICR
	LDA	CIA1ICR
	LDA	CIA2ICR
	LDA	#>TIRQ
	STA	IRQVECTOR
	LDA	#<TIRQ
	STA	IRQVECTOR+1
	LDA	#>IGNORE
	STA	NMIVECTOR
	LDA	#<IGNORE
	STA	NMIVECTOR+1
	LDA	#1
	STA	VICIMR
	STA	VICIFR
	LDA	#0
	STA	VICCR1
	LDA	#200
	STA	RASTER
	CLI
	RTS

	; Used for disk loader no irq's or nmi's
SETNOIRQ	SEI	
	LDA	#127
	STA	CIA1ICR
	STA	CIA2ICR
	LDA	CIA1ICR
	LDA	CIA2ICR
	LDA	#>IGNORE
	STA	IRQVECTOR
	STA	NMIVECTOR
	LDA	#<IGNORE
	STA	IRQVECTOR+1
	STA	NMIVECTOR+1
	LDA	#0
	STA	VICIMR
	STA	VICIFR
	STA	VICCR1
	STA	SID+&18		; no volume
	RTS

SCREEN_ON	LDA	#&10		; ENABLE SCREEN DISPLAY
	STA	SCREENENABLE
!WAIT	CMP	SCREENTEST
	BNE	!WAIT
	RTS

SCREEN_OFF	LDA	#0		; BLANK SCREEN TO BORDER
	STA	SCREENENABLE
!WAIT	CMP	SCREENTEST
	BNE	!WAIT
	RTS

	; div by 10
DIVID	LDA	#0
	ASL	MIKE1	
	LDY	#8
LOOP	ROL	A
	CMP	#10
	BCC	SKIP
	SBC	#10
SKIP	ROL	MIKE1
	DEY
	BNE	LOOP
	RTS

MBANK	EQU	&0200

BYTE4000	EQU	MBANK+00	;RELOCATION ABLE
TUNENO	EQU	MBANK+01	;----------------
FXNO	EQU	MBANK+02
SIDCON	EQU	MBANK+03	;THESE LOCATIONS
HARDY	EQU	MBANK+&04	;ARE THE SOUL OF THE
VARA	EQU	MBANK+&05	;MUSIC DATA (MBANK+&00+)
VARB	EQU	MBANK+&1A
VARC	EQU	MBANK+&2F	;IF THE DATA IS
VARD	EQU	MBANK+&44	;RELOCATED	TO	SAY,
VARE	EQU	MBANK+&59	;&5050, THEN	YOU
VARF	EQU	MBANK+&6E	;MUST ADD	&1050 TO
FBS	EQU	MBANK+&83	;EVERY LOCATION IN
FCS	EQU	MBANK+&84	;THIS TABLE.
FDS	EQU	MBANK+&85
FES	EQU	MBANK+&86
MNVLO	EQU	MBANK+&87
MNVHI	EQU	MBANK+&D5
FLTSEQ	EQU	MBANK+&123
DRUMTYPE	EQU	MBANK+&134
DRUMLO	EQU	MBANK+&140
DRUMHI	EQU	MBANK+&14C
OP635	EQU	MBANK+&158
OP535	EQU	MBANK+&176
OP533	EQU	MBANK+&177
COPY17	EQU	MBANK+&178
VOICE	EQU	MBANK+&179
SEQBLO	EQU	MBANK+&239
SEQBHI	EQU	MBANK+&27D
TRK1LO	EQU	MBANK+&2C1
TRK2LO	EQU	MBANK+&2C5
TRK3LO	EQU	MBANK+&2C9
TRK1HI	EQU	MBANK+&2F9
TRK2HI	EQU	MBANK+&2FD
TRK3HI	EQU	MBANK+&301	; END OF TABLE.

SETUP	STA	TUNENO
	LDA	#&02
	STA	HARDY
	LDA	#&00
	LDX	#&17
!X4	STA	&D400,X	; CLR SOUND REGS
	DEX
	BPL	!X4
	STX	BYTE4000
	STA	VARD+5	; TRKFIN1
	STA	VARD+12	;"2
	STA	VARD+19	;"3
	STA	VARA+2	;RST TRKPOS1
	STA	VARA+9	;"TRKPOS2
	STA	VARA+16	;"TRKPOS3
	STA	VARA+3	;"DELAY SLAVE1
	STA	VARA+10	;"DELAY SLAVE2
	STA	VARA+17	;"DELAY SLAVE3
	STA	VARA+4	;"SEQPOS1
	STA	VARA+11	;"SEQPOS2
	STA	VARA+18	;"SEQPOS3
	STA	VARF+4	;"HARD RESET1
	STA	VARF+11	;"HARD RESET2
	STA	VARF+18	;"HARD RESET3
	STA	VARF+6	;"FILTER POS1
	STA	VARF+13	;"FILTER POS2
	STA	VARF+20	;"FILTER POS3
	STA	COPY17
	LDA	#&5F
	STA	VARA
	STA	VARA+7
	STA	VARA+14
	LSR	A
	STA	&D418
	RTS

SETFX	STA	FXNO
	LDA	#&00
	LDY	#&06
YOB	STA	&D40E,Y
	DEY
	BPL	YOB
	LDY	SIDCON
	CPY	#&02
	BEQ	BEEPO
	STA	VARD+19	;TRKFIN3
	STA	VARA+16	;TRKPOS3
	STA	VARA+17	;DELAY SLAVE3
	STA	VARA+18	;SEQPOS3
	STA	VARF+18	;HARD RESET3
	STA	VARF+20	;FILTER POS	3
	LDA	#&5F
	STA	VARA+14
	RTS
BEEPO	STA	BEEP
	STA	BEEPOS
NOMUSIC	RTS

PLAYER	LDA	&FB
	STA	FBS
	LDA	&FC
	STA	FCS
	LDA	&FD
	STA	FDS
	LDA	&FE
	STA	FES
	LDA	VARD+5
	BPL	PNORM
	LDA	VARD+12
	BPL	PNORM
	LDA	VARD+19
	BPL	PNORM
	LDA	#&00
	STA	BYTE4000
	BEQ	DEADTUNE
PNORM	LDA	HARDY
	BEQ	PLAY
	DEC	HARDY
	LDA	#&1F
	STA	&D418
	LDA	#&00
	BEQ	BOING
PLAY	LDX	#&00	;WCHTRK?
START	LDA	BYTE4000
	BMI	YX6
DEADTUNE	STA	&D418	;CLR VOLUME
BOING	STA	&D405
	STA	&D406
	STA	&D40C
	STA	&D40D
	STA	&D413
	STA	&D414
	JMP	BB6	;SILENCE!

YX6	LDY	VARB,X	;CURRENT SOUND
	JSR	FILTER
	DEC	VARA+3,X	;DELAY SLAVE
	BEQ	HARDRS
	BMI	BB5
BB4	JMP	J1
HARDRS	LDA	VARF+4,X	;HARDRS TOG
	BEQ	BB4
	LDA	#&00
	STA	&D405,X
	STA	&D406,X
	JMP	J1
BB5	LDA	VARD+5,X	;TRKFIN
	BPL	TRKON
	JMP	AA5
TRKON	LDA	SIDCON
	CMP	#&01
	BNE	TRKON2
	CPX	#&0E
	BNE	TRKON2
	LDY	FXNO
	BPL	DOTRK3
TRKON2	LDY	TUNENO
	CPX	#&07
	BEQ	DOTRK2
	CPX	#&0E
	BEQ	DOTRK3
	LDA	TRK1LO,Y	;DO TRK1
	STA	&FB
	LDA	TRK1HI,Y
	STA	&FC
	JMP	CX1
DOTRK2	LDA	TRK2LO,Y	;DO TRK2
	STA	&FB
	LDA	TRK2HI,Y
	STA	&FC
	JMP	CX1
DOTRK3	LDA	TRK3LO,Y	;DO TRK3
	STA	&FB
	LDA	TRK3HI,Y
	STA	&FC

CX1	LDY	VARA+2,X	;TRKPOS
CC1	LDA	(&FB),Y	;TRKBASE,TRKPOS
	CMP	#&60	;REPEAT BYT?
	BCC	SEQBYT	;IF LESS THAN
	STA	VARA,X	;TRKRPT VAL
	INC	VARA+2,X	;TRKPOS
	INY
	BNE	CC1
SEQBYT	TAY
	LDA	SEQBLO,Y	;SEQBASE LO
	STA	&FD
	LDA	SEQBHI,Y	;SEQBASE HI
	STA	&FE
	LDA	#&FF
	STA	OP535	;PGLIDE
	LDA	#&00
	STA	VARC,X	;SLIDE DIR
CX4	LDY	VARA+4,X	;SEQPOS
	LDA	(&FD),Y	;SEQBASE,SEQPOS
	BNE	B7X
	JMP	J2
B7X	CMP	#&FF	;** ENDSEQ	**
	BCC	CX5
	INC	VARA+2,X	;TRKPOS
	LDA	#&00
	STA	VARA+4,X	;SEQPOS
	BEQ	CX1
	INC	VARA+4,X	;SEQPOS
	INY
	LDA	(&FD),Y	;SEQBASE,SEQPOS
CX5	CMP	#&FB	;** SLIDER	**
	BCC	SX2
	CMP	#&FB
	BEQ	IFB
C7X	LDA	#&02	; SLIDE UP
	BNE	DX1
IFB	LDA	#&01	; SLIDE DN
DX1	STA	VARC,X	;SLIDE DIR
	INC	VARA+4,X	;SEQPOS
	INY
	LDA	(&FD),Y	;SEQBASE,SEQPOS
	STA	VARC+2,X	;SLIDE VAL
	LDA	#&00
	STA	VARA+6,X	;ARP FLAG
	INC	VARA+4,X	;SEQPOS
	INY
	LDA	(&FD),Y	;SEQBASE,SEQPOS
SX2	CMP	#&F6	;** HARD RES	**
	BCC	DX3
	CMP	#&F6
	BNE	IF7
	LDA	#&00	;HARDRS TOG	
SF6	STA	VARF+4,X	;HARDRS TOG
	INC	VARA+4,X	;SEQPOS
	INY
	LDA	(&FD),Y	;SEQBASE,SEQPOS
	BNE	DX3
IF7	LDA	#&FF	;HARDRS TOG	
	BMI	SF6
DX3	CMP	#&70
	BCC	TRYVCE	;LESS THAN
	SBC	#&70	;CONVERT DELAY
	STA	VARD+1,X	;DELAY MASTER
	INC	VARA+4,X	;SEQPOS
	INY
	LDA	(&FD),Y	;SEQBASE,SEQPOS
TRYVCE	CMP	#&58	;** VOICE	**
	BCC	TRYARP	;IF LESS THAN
	SBC	#&58
	STA	VARD+6,X	;ACTUAL VOICE
	ASL	A	;CONVERT BYT
	ASL	A	;TO A SOUND	NUM.
	ASL	A
	STA	VARB,X	;CURRENT SOUND
	TAY
	LDA	VOICE,Y	;SOUND PULSE	WID
	PHA
	AND	#&0F	;PULSE HI
	STA	VARC+3,X	;PHI STA1
	STA	VARC+4,X	;PHI STA2
	PLA
	AND	#&F0	;PULSE LO
	STA	VARC+5,X	;PLO STA1
	STA	VARC+6,X	;PLO STA2
	LDA	#&00
	STA	VARD,X
	STA	VARA+6,X	;ARP FLAG
	INC	VARA+4,X	;SEQPOS
	LDY	VARA+4,X
	LDA	(&FD),Y	;SEQBASE,SEQPOS
TRYARP	CMP	#&57	;** ARPEGGIOS	**
	BCC	TRYCON
	INC	VARA+4,X	;SEQPOS
	INY
	LDA	(&FD),Y	;SEQBASE,SEQPOS
	AND	#&0F
	STA	VARE+1,X	;WCHARP
	LDA	#&00
	STA	VARE+2,X	;ARP BYT
	LDA	#&01
	STA	VARA+6,X	;ARP FLAG
	LDA	#&00
	INC	VARA+4,X	;SEQPOS
	INY
	LDA	(&FD),Y	;SEQBASE,SEQPOS
TRYCON	CMP	#&4F
	BNE	J2
	LDA	VARD+1,X
	STA	VARA+3,X
	JMP	CLOWN
J2	STA	VARD+2,X	;SEQ NOTE
	LDA	VARD+1,X	;DELAY MASTER
	STA	VARA+3,X	;DELAY SLAVE
	LDA	#&01
	STA	VARB+1,X	;GATEON FLAG
	STA	VARB+2,X	;HIHAT FLAG
	LSR	A
	STA	VARD+3,X	;DRUMPOS
	LDA	VARD+2,X	;SEQ NOTE
	BEQ	DX4
	LDY	VARB,X	;CURRENT SOUND
	LDA	VOICE+7,Y	;SOUND CTRL
	AND	#&02	;PULSE RESET
	BEQ	DX5	;OFF
	LDA	VARC+6,X	;PLO STA2
	STA	VARC+5,X	;PLO STA1
	LDA	VARC+4,X	;PHA STA2
	STA	VARC+3,X	;PHA STA1
DX5	LDA	VARD+2,X	;SEQ NOTE
	BNE	DX6
DX4	LDA	VARD+4,X	;LAST SEQ	NOTE
	STA	VARD+2,X	;SEQ NOTE
	LDA	#&00
	STA	VARD+4,X	;LAST SEQ	NOTE
	LDY	VARB,X	;CURRENT SOUND
	DEC	OP535	;PGLIDE
	BEQ	DX6
	JMP	D7X
DX6	STA	VARD+4,X	;LAST SEQ	NOTE
	TAY
	LDA	MNVHI,Y	;MNVTAB HI
	STA	&D401,X	;NOTE FREQ	HI
	STA	VARB+3,X	;NOTE FRQBYT	HI
	LDA	MNVLO,Y	;MNVTAB LO
	STA	&D400,X	;NOTE FREQ	LO
	STA	VARB+4,X	;NOTE FRQBYT	LO
	LDA	#&00
	STA	VARF+6,X
	LDY	VARB,X	;CURRENT SOUND
	JSR	FILTER	;** ADD Y	**
	LDA	VOICE+6,Y	;SOUND GATEOFF
	STA	&D404,X	;WAVE/GATE REG
	LDA	VOICE+2,Y	;SOUND A/D
	STA	&D405,X	;A/D REG
	LDA	VOICE+3,Y	;SOUND S/R
STOSR	STA	&D406,X	;S/R REG
	LDA	VARC+5,X	;PLO STA1
	STA	&D402,X	;PULSE LO REG
	LDA	VARC+3,X	;PH, STA1
	STA	&D403,X	;PULSE HI REG
D7X	LDA	VOICE+1,Y	;SOUND GATEON
	AND	OP535	;PGLIDE
	STA	&D404,X	;WAVE/GATE REG
CLOWN	INC	VARA+4,X	;SEQPOS
	LDY	VARA+4,X	;SEQPOS
	LDA	(&FD),Y	;SEQBASE,SEQPOS
	CMP	#&FF	;IS SEQ FINI?
	BNE	D8	;NO
	LDA	#&00	;YES
	STA	VARA+4,X	;RST SEQPOS
	LDA	VARA,X	;TRKRPT VAL
	CMP	#&5F
	BEQ	NXTSEQ
	DEC	VARA,X	;TRKRPT VAL
	BNE	D8

NXTSEQ	INC	VARA+2,X	;TRKPOS
	LDY	VARA+2,X
	LDA	(&FB),Y	;TRKBASE,TRKPOS
	CMP	#&FF	;TRKRAP?
	BNE	EX1	;NO
	LDA	#&00	;YES
	STA	VARA+2,X	;RST TRKPOS
	BEQ	D8
EX1	CMP	#&FD	;TRKSTOP?
	BNE	D8
	DEC	VARD+5,X
	BNE	D8
D8	LDA	VARD+4,X	;LAST SEQ	NOTE
	BEQ	J1

	LDY	VARB,X	;CURRENT SOUND
	LDA	VARC,X	;SLIDE DIR
	BNE	EX2
	JMP	AA5
EX2	JMP	J4

J1	LDA	VOICE+4,Y	;SOUND PULSE	HI
	STA	OP533	;XPULSE
	BEQ	EX5
	LDA	VARE,X	;PWIDTH VAL
	BNE	EX6
	CLC
	LDA	VARC+5,X	;PLO STA1
	ADC	OP533	;XPULSE
	STA	VARC+5,X	;PLO STA1
	STA	&D402,X	;PULSE LO REG
	LDA	VARC+3,X	;PHI STA1
	ADC	#&00
	STA	VARC+3,X	;PHI STA1
	STA	&D403,X	;PULSE HI REG
	CLC
	CMP	#&0E
	BCC	EX5
	INC	VARE,X	;PWIDTH VAL
	BNE	EX5
EX6	LDA	VARC+5,X	;PLO STA1
	SEC
	SBC	OP533	;XPULSE
	STA	VARC+5,X	;PLO STA1
	STA	&D402,X	;PULSE LO REG
	LDA	VARC+3,X	;PHI STA1
	SBC	#&00
	STA	VARC+3,X	;PHI STA1
	STA	&D403,X	;PULSE HI	REG
	CLC
	CMP	#&08
	BCS	EX5
	DEC	VARE,X	;PWIDTH VAL
EX5	LDA	VARA+6,X	;ARP FLAG
	BEQ	J4
GETNM	LDA	VARE+1,X	;ARP NO.
	ASL	A
	TAY
	LDA	OP635,Y	;ARP.POINTER	LO
	STA	SM+1
	STA	FM+1
	LDA	OP635+1,Y	;ARP.POINTER	HI
	STA	SM+2
	STA	FM+2
	LDA	VARE+2,X
	TAY
FM	LDA	&1000,Y
	BPL	E7X	;NOT FIN
	LDA	#&00	;RAP
	STA	VARE+2,X	;ARP NO.
	BPL	GETNM
E7X	LDA	VARE+2,X
	TAY
	LDA	VARD+2,X	;SEQ NOTE
	CLC
SM	ADC	&1000,Y	;CURRENT ARP.
	TAY
	LDA	MNVLO,Y	;MNVTAB LO
	STA	&D400,X	;NOTE FREQ	LO
	LDA	MNVHI,Y	;MNVTAB HI
	STA	&D401,X	;NOTE FREQ	HI
	INC	VARE+2,X	;ARP BYT
	JMP	AA5
J4	LDA	VARC,X	;SLIDE DIR
	BEQ	FX6
	CMP	#&01
	BEQ	F7X
	CMP	#&02
	BEQ	F8
	CMP	#&03
	BEQ	GX1
	CLC
	LDA	VARB+3,X	;NOTE FRQBYT	HI
	ADC	VARC+2,X	;SLIDE VAL
	STA	VARB+3,X	;NOTE FRQBYT	HI
	STA	&D401,X	;NOTE FREQ	HI
	JMP	FX6
F7X	CLC
	LDA	VARB+4,X	;NOTE FRQBYT	LO
	SBC	VARC+2,X	;SLIDE VAL
	STA	VARB+4,X	;NOTE FRQBYT	LO
	STA	&D400,X	;NOTE FREQ	LO
	LDA	VARB+3,X	;NOTE FRQBYT	HI
	SBC	#&00
	STA	VARB+3,X	;NOTE FRQBYT	HI
	STA	&D401,X	;NOTE FREQ	HI
	JMP	FX6
GX1	SEC
	LDA	VARB+3,X	;NOTE FRQBYT	HI
	SBC	VARC+2,X	;SLIDE VAL
	STA	VARB+3,X	;NOTE FRQBYT	HI
	STA	&D401,X	;NOTE FREQ	HI
	BNE	FX6
F8	CLC
	LDA	VARB+4,X	;NOTE FRQBYT LO
	ADC	VARC+2,X	;SLIDE VAL
	STA	VARB+4,X	;NOTE FRQBYT	LO
	STA	&D400,X	;NOTE FREQ	LO
	LDA	VARB+3,X	;NOTE FRQBYT	HI
	ADC	#&00
	STA	VARB+3,X	;NOTE FRQBYT	HI
	STA	&D401,X	;NOTE FREQ	HI
FX6	LDY	VARB,X	;CURRENT SOUND
	LDA	VOICE+7,Y	;SOUND CTRL
	AND	#&01	;IS IT A DRUM?
	BNE	GX2	;YES
FX5	JMP	AA5
GX2	LDA	&FB		;STORE POINTERS
	PHA
	LDA	&FC	;""
	PHA
	LDY	VARD+6,X	;ACTUAL VOICE
	LDA	DRUMTYPE,Y
	TAY
	LDA	DRUMLO,Y	;DRUMSEQ LO
	STA	&FB
	LDA	DRUMHI,Y	;DRUMSEQ HI
	STA	&FC
	LDY	VARD+3,X	;DRUMPOS
	LDA	(&FB),Y	;DRUMSEQ,DRUMPOS
	BEQ	GX4	;DRUM END
	BPL	GX3	;PLAY BYTE
	STA	&D404,X	;WAVE/GATE	REG
	INY
	INC	VARD+3,X	;NXT DRUMPOS
	LDA	(&FB),Y	;DRUMSEQ,DRUMPOS
	STA	&D401,X	;NOTE FREQ	HI
	INY
	INC	VARD+3,X	;NXT DRUMPOS
	BNE	GX4
GX3	STA	VARF+2,X	;WAVE/GATE	BYTE
	INY
	INC	VARD+3,X	;NXT DRUMPOS
	SEC
	LDA	VARB+3,X	;NOTE FRQBYT	HI
	SBC	(&FB),Y	;DRUMSEQ,DRUMPOS
	STA	VARB+3,X	;NOTE FRQBYT	HI
	INY
	INC	VARD+3,X	;NXT DRUMPOS
	LDA	VARF+2,X	;WAVE/GATE	BYTE
	STA	&D404,X	;WAVE/GATE	REG
	LDA	VARB+3,X	;NOTE FRQBYT	HI
	STA	&D401,X	;NOTE FREQ	HI
GX4	PLA
	STA	&FC
	PLA
	STA	&FB

AA5	LDA	VARF+5,X
	BEQ	BEEP2
	TAX
	CMP	#&0E
	BNE	NOT0E
	LDA	SIDCON
	BEQ	BB6
NOT0E	JMP	START
BEEP2	LDA	SIDCON
	CMP	#&02
	BNE	BB6
	LDA	BEEP
	BEQ	BEBEEP
	DEC	BEEP
	LDA	#&00
	STA	&D413
	STA	&D414
	BEQ	BB6

BEBEEP	LDA	#&08
	STA	&D411
	LDA	#&F7
	STA	&D414
	LDA	#&00
	STA	&D410
	STA	&D413
	STA	&D40E
	LDY	BEEPOS
	INC	BEEPOS
	INC	BEEPOS
	LDA	BEEPSEQ,Y
	BEQ	FINBEEP
	STA	&D412
	INY
	LDA	BEEPSEQ,Y
	STA	&D40F
	LDX	#&0E
	JSR	NOFILT

BB6	LDA	FBS
	STA	&FB
	LDA	FCS
	STA	&FC
	LDA	FDS
	STA	&FD
	LDA	FES
	STA	&FE
	RTS

FINBEEP	LDY	#&FF
	STY	SIDCON
	INY
	STY	BEEP
CLRBEEP	STY	&D413
	STY	&D414
	BEQ	BB6

BEEPSEQ	.BYTE	&81,&08,&11,&40
	.BYTE	&40,&30,&40,&18
	.BYTE	&40,&01
	.BYTE	&00

BEEP	.BYTE	0
BEEPOS	.BYTE	0

FILTER	LDA	VOICE+5,Y	;FILTER ON/OFF
	BEQ	NOFILT
	LDA	VARA+1,X	;XFILTER VAL
	ORA	COPY17
	STA	&D417
	STA	COPY17
	LDY	VARF+6,X
	LDA	FLTSEQ,Y
	BEQ	HOMEBOY
	STA	&D416
	INC	VARF+6,X
HOMEBOY	LDY	VARB,X	;CURRENT SOUND
	RTS
NOFILT	LDA	VARF+3,X
	AND	COPY17
	STA	&D417
	STA	COPY17
	RTS

FLAGS	EQU	&DD00
DATA	EQU	&DD01
IN	EQU	4
OUT	EQU	8

PDSSETUP	LDA	#&3B
	STA	&DD02		;Setup flags port.
	LDA	#0
	STA	&DD03		;Data port setup for reading.
POWER	RTS

PDSMONITOR	LDA	FLAGS
	EOR	!STROBE+1
	AND	#IN		;Get the command byte.
	BNE	POWER
	LDX	DATA		;Leave command byte in X register.
	LDA	FLAGS
	AND	#255-IN-OUT
	ORA	!STROBE+1
	STA	FLAGS
	LDA	!STROBE+1
	EOR	#IN+OUT
	STA	!STROBE+1
	CPX	#179
	BEQ	PDSMONITOR
!NOT187	CPX	#180
	BNE	!NOT180
	JSR	!GETBYT
	STA	!ADDR+2		;This is the start address.
	JSR	!GETBYT
	TAY
	JSR	!GETBYT
	STA	!COUNT1+1
	JSR	!GETBYT
	STA	!COUNT0+1		;This is the length of code.
!COUNT0	LDA	#1
	BNE	!0
!COUNT1	LDA	#1
	BEQ	!5		;Decrement counter.
 	DEC	!COUNT1+1
!0	DEC	!COUNT0+1
	JSR	!GETBYT
!ADDR	STA	&100,Y		;Get and store byte.
	INY
	BNE	!COUNT0
	INC	!ADDR+2		;Inc position in memory.
	JMP	!COUNT0

!NOT180	CPX	#182
	BNE	!5
	JSR	!GETBYT
	STA	!SADDR+2		;This is the start address.
	JSR	!GETBYT
	TAY
	JSR	!GETBYT
	STA	!SCOUNT1+1
	JSR	!GETBYT
	STA	!SCOUNT0+1		;This is the length of code.
!UPLOAD	JSR	!PORTOUT		;Set up ports for output.
!SCOUNT0	LDA	#1
	BNE	!1
!SCOUNT1	LDA	#1
	BEQ	!OUT		;Decrement counter.
	DEC	!SCOUNT1+1
!1	DEC	!SCOUNT0+1
!SADDR	LDA	&100,Y		;Get and send byte.
	JSR	!SENDBYT
	INY
	BNE	!SCOUNT0
	INC	!SADDR+2		;Inc position in memory.
	JMP	!SCOUNT0
!OUT	JMP	!PORTIN		;Set up ports for input again.

!GETBYT	LDA	FLAGS
!STROBE	EOR	#8		; to start with
	AND	#IN
	BNE	!GETBYT
	LDX	DATA
	LDA	FLAGS
	AND	#255-IN-OUT
	ORA	!STROBE+1
	STA	FLAGS
	LDA	!STROBE+1
	EOR	#IN+OUT
	STA	!STROBE+1
	TXA
!5	RTS

!SENDBYT	STA	DATA
	LDA	FLAGS
	AND	#255-IN-OUT
	ORA	!STROBE+1
	STA	FLAGS
	LDA	!STROBE+1
	EOR	#IN+OUT
	STA	!STROBE+1
!2	LDA	FLAGS
	EOR	!STROBE+1
	AND	#IN
	BEQ	!2
	RTS

!PORTIN	LDA	#0
	STA	&DD03		;Data port setup for reading.
	LDA	FLAGS
	AND	#255-IN-OUT
	ORA	!STROBE+1
	STA	FLAGS
	LDA	!STROBE+1
	EOR	#OUT
	STA	!STROBE+1
	RTS

!PORTOUT	LDA	FLAGS
	EOR	!STROBE+1		;Wait till pc ready.
	AND	#IN
	BNE	!PORTOUT
	LDA	#255
	STA	&DD03		;Data ports
	LDA	!STROBE+1
	EOR	#IN		;Toggle strobe line.
	STA	!STROBE+1
	RTS

	;LIST	ON

****************************************
*	CONTROL GAME START	*
****************************************
START_CODE	SEI			; start of game code
	CLD
	LDX	#255
	TXS
	LDA	#127		; lock shit OS up
	STA	CIA1ICR
	STA	CIA2ICR
	LDA	CIA1ICR
	LDA	CIA2ICR
	LDA	#%10000000		; set frequency 50 Hz
	STA	CIA1CRA
	LDA	#>IGNORE		; set all hardware vectors
	STA	NMIVECTOR		; point to an RTI
	STA	RESETVECTOR		; all system stuff is shut down
	STA	IRQVECTOR	
	LDA	#<IGNORE
	STA	NMIVECTOR+1
	STA	RESETVECTOR+1
	STA	IRQVECTOR+1
	LDA	#%00100101		; want IO and no KERNAL or BASIC
	STA	R6510
	LDA	#0
	STA	VICCR1		; blank screen
	STA	BORDER
	STA	COLOUR0		; allways 0
	STA	ENABLE		; no sprites on screen
	STA	EXPANDY
	STA	EXPANDX
	STA	SCREENTEST		; allow first test to follow throuGH
	STA	SCREENENABLE
	STA	PRIORITY
	STA	MULTI1		; multicolour 1 black
	LDA	#LT_RED		; face skin colour
	STA	MULTI0
	LDA	#%11111111		; all multicolour sprites
	STA	MULTICOL
	LDA	#WHITE
	STA	SPC0
	LDA	#MED_GREY		; ripley top
	STA	SPC1
	LDA	#ORANGE		; ripley legs
	STA	SPC2

	LDA	#0
	STA	LEVEL

RESTART	JSR	SETNOIRQ		; all off
	JSR	SETTIRQ
START_INIT	LDA	#255
	STA	SIDCON
	LDA	#0
	JSR	SETUP		; music on
	JSR	INFO
STARTPAGE	JSR	SCREEN_ON		; now have a look

WHOLE_LOT	JSR	FIFTY		; delay a bit
	LDA	LEVEL
	CLC
	ADC	RIGHT
	SEC
	SBC	LEFT
	STA	LEVEL
	LDA	FIRE
	BEQ	DE
	LDA	#1
	STA	SIDCON
	LDA	LEVEL
	JSR	SETFX	
DE	JSR	SMDEL
	JSR	LEV_MESS
	JMP	STARTPAGE		; restart sequence

DE_BOUNCE	JSR	JOYGET
	LDA	FIRE
	BEQ	DE_BOUNCE
LET_GO_OF	JSR	JOYGET
	BNE	LET_GO_OF
	RTS
	
	; wait for vertical sync
FIFTY	LDA	SYNC		; current meanless value
WAIT	CMP	SYNC		; when changed
	BEQ	WAIT		; must be a fly back
	RTS

SMDEL	LDY	#4
ASEC	JSR	FIFTY
	DEY
	BNE	ASEC
	RTS

	; character table for y one char at time (title screen)
	TABLELO	SMAPL,0,24,40,SCREEN1
	TABLEHI	SMAPH,0,24,40,SCREEN1

PLOT_TEXT	PLA			; get return address
	STA	MIKE1		; low byte
	PLA
	STA	MIKE1+1		; high byte
	LDY	#1		; index to first byte
	LDA	(MIKE1),Y		; colour for text
	STA	COLBYTE+1
	INY
	LDA	(MIKE1),Y		; Y cord
	TAX
	LDA	SMAPL,X		; low of screen memory
	STA	ONSCREEN+1
	STA	COLSCREEN+1
	LDA	SMAPL+1,X		; next line down
	STA	ONSCREEN1+1
	STA	COLSCREEN1+1
	LDA	SMAPH,X		; high byte of screen memory
	STA	ONSCREEN+2
	SEC
	SBC	#<(SCREEN1-NYBBLE)	; get nybble memory
	STA	COLSCREEN+2	
	LDA	SMAPH+1,X		; next line down
	STA	ONSCREEN1+2
	SEC
	SBC	#<(SCREEN1-NYBBLE)	; get to memory
	STA	COLSCREEN1+2	
	INY
	LDA	(MIKE1),Y
	TAX
POKETOSCREEN	INY
	LDA	(MIKE1),Y		; get text to convert
	CMP	#32
	BNE	NO_SPACE
	LDA	#0		; blank char
	BEQ	ONSCREEN
NO_SPACE	CMP	#255
	BEQ	ENDT		; last char to poke
ONSCREEN	STA	&FFFF,X		; screen memory
	BEQ	ONSCREEN1
	CLC
	ADC	#43		; point to other half
ONSCREEN1	STA	&FFFF,X
COLBYTE	LDA	#255		; nybble byte
COLSCREEN	STA	&FFFF,X		; nybble memory
COLSCREEN1	STA	&FFFF,X		; second half
	INX			; along screen
	BNE	POKETOSCREEN	; keep going
ENDT	TYA
	SEC
	ADC	MIKE1		; advance to end of
	STA	MIKE1		; data to set return
	BCC	FISH		; address of call
	INC	MIKE1+1		; high byte over
FISH	JMP	(MIKE1)		; return back

SYS	EQU	9		; select y start

CYS	EQU	2

INFO	JSR	PLOT_TEXT		; Colour, Ycord, Xcord
	DB	2,CYS+4,1,"JOYSTICK LEFT AND RIGHT FOR EFFECT NO",&3A,255
	JSR	PLOT_TEXT
	DB	4,CYS+7,1,"PRESS FIRE BUTTON TO TEST SOUND EFFECT",255
	RTS	

LEV_MESS	LDA	LEVEL
	STA	MIKE1
	JSR	DIVID
	ORA	#"0"
	STA	STAGE_NO+12
	JSR	DIVID
	ORA	#"0"
	STA	STAGE_NO+11
	JSR	DIVID
	ORA	#"0"
	STA	STAGE_NO+10
	JSR	PLOT_TEXT
STAGE_NO	DB	1,13,15,"EFFECT 000",255
	RTS

	SEND	COMPUTER1

	END	START_CODE

