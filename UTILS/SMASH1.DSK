 
	SEND COMPUTER1

;disk loader
;runs as a basic file

LOADER	EQU	$2	;address to put loader to

HIRES	=	$6000	;address of bitmap loader
SCNRAM	=	$5C00	;addrees of color screen map
NYBBLE	=	$D800

DSKPTR	=	$9E
TEMPY	=	$62 

HANG	MACRO
!WAIT	INC	$D020
	JMP	!WAIT
	ENDM

	ORG	$801
START	HEX	0B080A009E32303631000000 
GO	LDX	#$FF
	TXS
	LDA	#$0
	STA	$D011
	JSR	INIT
	SEI
	LDX	#$FF
	TXS
	LDA	#$35
	STA	1
	INX
	STX	&D020
	STX	&D021
	STX	&D011
	STX	!BUG+2
!LOOP	LDA	REST_X,X
!BUG	STA	LOADER+$100,X
	LDA	REST_X+$100,X
	STA	LOADER+$100,X
	DEX	
	BNE	!LOOP
	JMP	LOADER 

RAS_IRQ	LDA	$D019
	STA	$D019
	JMP	$EA7E

INIT	SEI	
	LDA	#$36	;roms in
	STA	$1

	JSR	$FF84	;IO_INIT
	JSR	$FF8A	;RESTOR
	SEI
	LDA	#>RAS_IRQ
	STA	$314
	LDA	#<RAS_IRQ
	STA	$315
	JSR	OPEN_DRIVE
	LDA	#>DISK_CODE
	LDX	#<DISK_CODE
	STA	DSKPTR
	STX	DSKPTR+1
!NXT_BLK	JSR	DO_M_W
	LDY	#$0
!LOOP	LDA	(DSKPTR),Y
	JSR	WRT_BYT
	INY	
	CPY	#$10
	BNE	!LOOP
	INC	$D020
	LDA	#$D
	JSR	WRT_BYT
	JSR	CLOSE_DISK
	JSR	OPEN_DRIVE
	LDA	DSKPTR
	CLC	
	ADC	#$10
	STA	DSKPTR
	BCC	!NINC
	INC	DSKPTR+1
!NINC	CMP	#>(DISK_END+DISK_CODE-$500)
	LDA	DSKPTR+1
	SBC	#<(DISK_END+DISK_CODE-$500)
	BCC	!NXT_BLK
	JSR	DO_M_E
	JSR	CLOSE_DISK
	LDA	$DD00
	AND	#$3
	ORA	#$C4
	STA	$DD00
	LDX	#$0
!SLOW	DEY	
	BNE	!SLOW
	DEX	
	BNE	!SLOW
RET	RTS	

OPEN_DRIVE	JSR	$FFE7
	LDX	#$8
	LDA	#$F
	TAY	
	JSR	$FFBA
	LDA	#$0
	JSR	$FFBD
	JSR	$FFC0
	LDX	#$F
	JSR	$FFC9
	RTS
		
WRT_BYT	STY	TEMPY
	JSR	$FFD2
	LDY	TEMPY
	RTS	

DO_M_W	LDA	#"M"
	JSR	WRT_BYT
	LDA	#"-"
	JSR	WRT_BYT
	LDA	#"W"
	JSR	WRT_BYT
	LDA	DSKPTR
	SEC	
	SBC	#>(DISK_CODE-$500)
	PHP	
	CLC	
	JSR	WRT_BYT
	PLP	
	LDA	DSKPTR+1
	SBC	#<(DISK_CODE-$500)
	CLC	
	JSR	WRT_BYT
	LDA	#$10
	JMP	WRT_BYT
	
DO_M_E	LDY	#$0
!LOOP	LDA	!M_E,Y
	JSR	WRT_BYT
	INY	
	CPY	#$6
	BNE	!LOOP
	RTS	
!M_E	DB	"M-E"
	DW	$500
	DB	13
CLOSE_DISK	JSR	$FFCC
	LDA	#$F
	JMP	$FFC3

DISK_CODE	
	ORG	DISK_CODE,$500
	JSR	L67F
L503	JSR	D_GETNAM
	LDA	$E
	STA	L6A5
	LDA	$F
	STA	L6A5+1
	LDY	#$1
LA059	LDX	#$12
	STX	$E
	STY	$F
	JSR	D_GETSECT
	LDY	#$2
!NXT_FILE	LDA	$700,Y
	AND	#$83
	CMP	#$82
	BNE	!NOT_IT
	LDA	$703,Y
	CMP	L6A5
	BNE	!NOT_IT
	LDA	$704,Y
	CMP	L6A5+1
	BNE	!NOT_IT
	JMP	D_GOTNAM
!NOT_IT	TYA	
	CLC	
	ADC	#$20
	TAY	
	BCC	!NXT_FILE
	LDY	$701
	BPL	LA059
L545	LDA	#$0
	STA	$1800
	LDX	#$FE	;send file not found message
	JSR	D_SENDBYT
	LDX	#$FE
	JSR	D_SENDBYT
	LDX	#$AC
	JSR	D_SENDBYT
	LDX	#$F7
	JSR	D_SENDBYT
	JMP	L503
D_GOTNAM	LDA	$701,Y
	STA	$E
	LDA	$702,Y
	STA	$F
!NXT_BLK	JSR	D_GETSECT
	LDY	#$0
	LDA	$700
	STA	$E
	BNE	!SKIP
	LDY	$701
	INY	
!SKIP	STY	L6A5
	LDA	$701
	STA	$F
	LDY	#$2
	LDA	#$0
	STA	$1800
!MORE	LDX	$700,Y
	CPX	#$AC
	BNE	!NOT_AC
	JSR	D_SENDBYT
	LDX	#$AC
!NOT_AC	JSR	D_SENDBYT
	INY	
	CPY	L6A5
	BNE	!MORE
	LDA	$700
	BEQ	D_EOF
	LDX	#$AC
	JSR	D_SENDBYT
	LDX	#$C3
	JSR	D_SENDBYT
	LDA	#$8
	STA	$1800
	JMP	!NXT_BLK ;L56B
D_EOF	LDX	#$AC
	JSR	D_SENDBYT
	LDX	#$FF
	JSR	D_SENDBYT
	JMP	L503
D_GETNAM	LDA	#$8
	STA	$1800
	LDA	$1C00
	AND	#$F7
	STA	$1C00
	CLI	
	LDA	#$1
!WAIT	BIT	$1800
	BEQ	!WAIT
	SEI	
	LDA	#$0
	STA	$1800
	JSR	D_GETBYT
	PHA
	JSR	D_GETBYT
	STA	$E
	JSR	D_GETBYT
	STA	$F
	LDA	#$8
	STA	$1800
	LDA	$1C00
	ORA	#$8
	STA	$1C00
	PLA
	RTS	
D_GETSECT	LDY	#$5
	STY	$8B
LA070	CLI	
	LDA	#$80
	STA	$4
LA065	LDA	$4
	BMI	LA065
	CMP	#$1
	BEQ	LA066
	DEC	$8B
	LDY	$8B
	BMI	LA067
	CPY	#$2
	BNE	LA068
	LDA	#$C0
	STA	$4
LA068	LDA	$16
	STA	$12
	LDA	$17
	STA	$13
LA069	LDA	$4
	BMI	LA069
	BPL	LA070
LA067	PLA	
	PLA	
	JMP	L545
LA066	SEI	
	RTS	
D_SENDBYT	STX	$14
	LDA	#$4
	JSR	L63C
	JSR	L63C
	JSR	L63C
L63C	LSR	$14
	LDX	#$2
	BCC	LA071
	LDX	#$0
LA071	BIT	$1800
	BNE	LA071
	STX	$1800
	LSR	$14
	LDX	#$2
	BCC	LA072
	LDX	#$0
LA072	BIT	$1800
	BEQ	LA072
	STX	$1800
	RTS	
D_GETBYT	LDY	#$4
LA075	LDA	#$4
LA073	BIT	$1800
	BEQ	LA073
	LDA	$1800
	LSR	A
	ROR	$14
	LDA	#$4
LA074	BIT	$1800
	BNE	LA074
	LDA	$1800
	LSR	A
	ROR	$14
	DEY	
	BNE	LA075
	LDA	$14
	RTS	
L67F	SEI	
	CLD	
	LDY	#$8
LA078	LDA	#$10
	STA	$1800
LA076	DEX	
	BNE	LA076
	LDA	#$0
	STA	$1800
LA077	DEX	
	BNE	LA077
	DEY	
	BNE	LA078
LA079	LDA	$1800
	AND	#$5
	BNE	LA079
	LDA	$1800
	AND	#$5
	BNE	LA079
	RTS
L6A5	NOP	

DISK_END	
	ORG	DISK_CODE+(DISK_END-$500),LOADER

REST_X	EQU	DISK_CODE+(DISK_END-$500)

REST	SEI
	LDA	#$35
	STA	1
	JSR	LOAD_S
	JSR	DELAY
	LDA	#&58
	STA	LOADADD+1
	INC	FNAME+1
	LDA	#0
	STA	LOADADD+0
	STA	&D011
	JSR	LOAD_S
	JSR	DELAY
	;JMP	AGAIN
	JSR	LOADFILES
	;JMP	$800

DELAY	LDY	#4
MIKE	LDX	#250
HELLO	LDA	#80
FRAME	CMP	&D012
	BNE	FRAME
	DEX
	BNE	HELLO
	DEY
	BNE	MIKE
	RTS

LOADADD	DW	&5800	;zero page locations
MY_BYTE	DB	0	;used by actual dload

LOAD_S	JSR	DLOAD	;please adjust for your bitmap!
	LDY	#0
!COPY	LDA	&5800,Y
	STA	NYBBLE,Y
	LDA	&5800+200,Y
	STA	NYBBLE+200,Y
	LDA	&5800+400,Y
	STA	NYBBLE+400,Y
	LDA	&5800+600,Y
	STA	NYBBLE+600,Y
	LDA	&5800+800,Y
	STA	NYBBLE+800,Y
	INY	
	CPY	#200
	BNE	!COPY

	LDA	&DD00
	AND	#$FC
	ORA	#2
	STA	&DD00
	LDA	#0
	STA	&D021
	STA	&D020

	LDA	#%01111111
	STA	&D018
	LDA	#&18
	STA	&D016
	LDA	#&3B
	STA	&D011
	LDA	#&FC
	STA	$D01C
	RTS

FILES1
	;DW	$800
	;DB	"I1"
	;DW	$5800	; start of bitmap data
	;DB	"P0"
	;DB	$FF
OLD_X	DB	0
OLD_Y	DB	0
X76A5	DB	0
FNAME	DB	"P0",0,0	

LOADFILES	
!NEXT	LDY	#0
	LDA	FILES1,Y
	BPL	!NOT_FF
	RTS	
!NOT_FF	STA	LOADADD
	LDA	FILES1+1,Y
	STA	LOADADD+1
!MORE	LDA	FILES1+2,Y
	STA	FNAME
	LDA	FILES1+3,Y
	STA	FNAME+1
	TYA
	CLC	
	ADC	#4
	STA	!NEXT+1
!GOT_NAM	JSR	DLOAD
	BCS	!NEXT
!ERROR	INC	$D020
	JMP	!ERROR

;load a file from disk
;(LOADADD)->points to load address
;FNAME,FNAME+1 contains a two byte file name
;Returns with CC on error, else CS
DLOAD	LDA	#$4
	JSR	SEND_NAM
	JSR	INIT_TALK
	JSR	GET_BYTE ;skip load address from file
	JSR	GET_BYTE
	LDY	#$0
!LOOP	JSR	GET_BYTE
	CMP	#$AC
	BNE	!STORE_IT
	JSR	GET_BYTE
	CMP	#$AC
	BEQ	!STORE_IT ;really was a $ac
	CMP	#$FF
	BEQ	!ALL_DONE
	CMP	#$F7
	BEQ	!ERROR
	JSR	INIT_TALK ;oops
	JMP	!LOOP
!STORE_IT	INC	$D020
	DEC	$1
	STA	(LOADADD),Y
	INC	$1
	DEC	$D020
	INY	
	BNE	!LOOP
	INC	LOADADD+1
!NINC	JMP	!LOOP
!ERROR	CLC	
!ALL_DONE	LDX	OLD_X
	LDY	OLD_Y
	LDA	#$0
	RTS	
SEND_NAM	PHA	
	STX	OLD_X
	STY	OLD_Y
L7613	LDA	#$24
	STA	$DD00
	JSR	INIT_TALK
	PLA	
	TAX	
	JSR	SEND_BYTE
	LDY	#$0
LA084	LDA	FNAME,Y
	JSR	SEND_BYTE
	INY	
	DEX	
	BNE	LA084
	RTS	
GET_BYTE	JSR	GET_2BITS
	JSR	GET_2BITS
	JSR	GET_2BITS
	JSR	GET_2BITS
	JSR	!RET
	LDA	MY_BYTE
!RET	RTS	
GET_2BITS	LDX	#$94
	LDA	$DD00
	STX	$DD00
	ASL	A
	ROR	MY_BYTE
	PHA	
	PLA	
	PHA	
	PLA	
L764E	LDX	#$C4
	LDA	$DD00
	STX	$DD00
	ASL	A
	ROR	MY_BYTE
	RTS	
SEND_BYTE	STA	MY_BYTE
L765C	JSR	SEND_2BITS
	JSR	SEND_2BITS
	JSR	SEND_2BITS
	JSR	SEND_2BITS
	RTS	

SEND_2BITS	LDA	#$14
	LSR	MY_BYTE
	BCC	!BIT0
	ORA	#$20
!BIT0	STA	$DD00
	NOP	
	NOP	
	NOP	
	NOP	
L7678	LDA	#$4
	LSR	MY_BYTE
	BCC	!BIT0
	ORA	#$20
!BIT0	STA	$DD00
	NOP	
	NOP	
	RTS
	
INIT_TALK	LDX	#$32
!LOOP	DEX	
	BNE	!LOOP
LA088	LDA	$DD00
	AND	#$40
	BEQ	LA088
L7692	LDA	#$C4
	STA	$DD00
	LDA	#$FE
	STA	X76A5
	LDX	#$5
!LOOP	DEX	
	BNE	!LOOP
	RTS
ENDLOAD
LENGTH	=	(ENDLOAD-REST)
	END	GO


	END

